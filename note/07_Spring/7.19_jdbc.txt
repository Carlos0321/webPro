JDBC Template
1. JDBC template를 이용한 반복코드 줄이기 : JDBC를 이용하는 가장 큰 이유
DAO객체를 이용해서 DataBase의 데이터를 이용한다.
이때 매번 같은 동작을 반복하는 부분이 있다.(드라이버 로드, 커넥션 생성 및 DB연결, SQL실행, 자원해제)
이런 반복적인 작업을 스프링에서는 간단하게 처리 할 수 있다.

①JDBC 드라이버 로드 – DriverManager
②데이터 베이스 연결 – Connection          
③SQL문 실행 – PreparedStatement, ResultSet
④DB 연결 해제 - *.close()

2. Spring 빈을 이용한 코드 간소화
Spring빈을 이용하여 DataBase관련 클래스를 간소화한다.
스프링 설정파일에서 JdbcTemplate 빈을 생성하여 사용한다

   DataSource빈을 먼저 만들어야 한다  //jdbcTemplate이 의존하기 때문에
   정보들은 properties에 들어 있다, 외부파일로 만들어야 함 
	
Pom.xml 에 JDBC Template 사용을 위한 dependencies 추가
<!-- JDBC Template -->
<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.4.RELEASE</version>
		</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>4.2.9.RELEASE</version>
		</dependency>

Controller의 template에 bean이 담겨야 하는데 그러기 위해서 자동으로 setter를 호출해서 jdbcTemplate이 들어오도록 자동 autoscan할 때 @AutoWired 주면 자동으로 빈이 생성되어 이쪽으로 setting되어 할당된다.

String sql ="";
return (ArrayList<BoardDto>) template.query(sql, new BeanPropertyRowMapper<BoardDto>(BoardDto.class));
	//어떤 타입을 ArrayList에 담을때  rowMapper로 불러옴
return template.queryForObject(sql, Integer.class); //한줄만 리턴  //sql을 실행한 것을  int로 리턴   

