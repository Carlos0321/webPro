--- [VII] DDL, DML, DCL 
-- SQL = DDL (테이블 생성, 테이블 삭제, 테이블  구조변경, 테이블 모든 데이터 제거)
     --   = DML(검색 =SELECT, 추가=INSERT, 수정=UPDATE, 삭제=DELETE)
     --   = DCL(사용자계정생성, 사용자권한 부여,권한박탈, 사용자계정삭제, 트랜잭션 명령어 = ROLLBACK,COMMIT) 

-- DDL (롤백불가)
-- 1. 테이블  생성(CREATE TABLE)
CREATE TABLE BOOK(
    BOOKID NUMBER(4),  --도서번호 BOOKID 필드 타입은 숫자 4자리 
    BOOKNAME VARCHAR2(300),  --책 이름 BOOKNAME 필드는 문자 300BYTE
    PUBLISHER VARCHAR2(300), --출판사 PUBLISHER 필드는 문자 300BYTE
    RDATE       DATE,               --출판일 RDATE 필드는 DATE형
    PRICE        NUMBER(8),        -- 가격 PRICE 필드는 숫자8자리
    PRIMARY KEY(BOOKID));       --테이블 내 주키(PRIMAY KEY) 설정 -NOT NULL, 유일한 값 입력 
    
SELECT * FROM BOOK;    

DROP TABLE BOOK;
CREATE TABLE book(
    bookid NUMBER(4) PRIMARY KEY,
    BOOKNAME VARCHAR2(20),
    PUBLISHER VARCHAR2(20),
    RDATE       DATE,
    PRICE        NUMBER(8)   );
    
SELECT * FROM BOOK;    
SELECT ROWNUM, EMPNO, ENAME FROM EMP; --ROWNUM : 테이블에서 읽어들인 논리적 순서
SELECT ROWNUM, EMPNO, ENAME FROM EMP WHERE DEPTNO=20 ORDER BY ENAME; 
--EMP 테이블과 유사한 EMP01 : EMPNO(숫자4), ENAME(문자20), SAL(숫자7,2)
CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(20),
    SAL NUMBER(7,2));
DESC EMP01;
--DEPT와 유사한 DEPT01 : DEPTNO(숫자2, PK), DNAME(문자14), LOC(문자13)
CREATE TABLE DEPT01(
    DEPTNO NUMBER(2),
    DNAME  VARCHAR2(14),
    LOC       VARCHAR2(13),
    PRIMARY KEY(DEPTNO));
DESC DEPT01;    
DESC DEPT;

--서브쿼리를 이용한 테이블 생성 
CREATE TABLE EMP02 
    AS SELECT * FROM EMP; -- 서브쿼리 결과만 EMP02테이블 생성후 들어감(제약조건은 미포함)
SELECT *FROM EMP02;
DESC EMP02 ;
    --EX EMP03 : EMP테이블에서 EMPNO, ENAME, DEPTNO만 추출한 데이터로 테이블 
CREATE TABLE EMP03
AS
SELECT EMPNO, ENAME, DEPTNO FROM EMP;
    --EX. EMP04 : EMP테이블에서 10번 부서만 추출한 데이터로 테이블 
CREATE TABLE EMP04 AS SELECT * FROM EMP WHERE DEPTNO =10;
SELECT * FROM EMP04;
    --EX. EMP05 : EMP테이블 구조(필드와 그의 타입)만 추출 
CREATE TABLE EMP05 AS SELECT * FROM EMP WHERE  1=0;
SELECT * FROM EMP05;

-- 2. 테이블 구조 변경(ALTER TABLE)
--ALTER TABLE 테이블명 ADD || MODIFY || DROP ~ 
-- (1) 필드 추가(ADD)  :추가된 필드의 데이터는 NULL
SELECT * FROM EMP03; -- EMPNO, ENAME, DEPTNO
ALTER TABLE EMP03 ADD (JOB VARCHAR2(20), SAL NUMBER(7,2));
SELECT * FROM EMP03;
ALTER TABLE EMP03 ADD(COMM NUMBER(7,2));

-- (2) 필드 수정 (MODIFY) 
SELECT * FROM EMP03 ; -- EMPNO(숫4), ENAME(문10), DEPTNO(숫2), /JOB(문20)와 SAL와 COMM(숫7,2)는 데이터 NULL
ALTER TABLE EMP03 MODIFY (EMPNO VARCHAR2(4)); --숫자 데이터가 들어있는 상태에서는 숫자로만 변경 가능
ALTER TABLE EMP03 MODIFY (EMPNO NUMBER(3)); --에러
ALTER TABLE EMP03 MODIFY (EMPNO NUMBER(5)); --가능_
ALTER TABLE EMP03 MODIFY(ENAME NUMBER(4)); --문자 데이터가 들어 있는 상태에서는 문자로만 변경가능
SELECT MAX(LENGTH(ENAME)) FROM EMP;
ALTER TABLE EMP03 MODIFY(ENAME VARCHAR2(3000));
DESC EMP03;
ALTER TABLE EMP03 MODIFY(ENAME VARCHAR2(10));
ALTER TABLE EMP03 MODIFY(ENAME VARCHAR2(5)); --불가능 (6BYTE 글자 데이터가 있어서)
ALTER TABLE EMP03 MODIFY(JOB NUMBER(4));

-- (3) 필드 삭제(DROP)
ALTER TABLE EMP03 DROP COLUMN JOB;
SELECT * FROM EMP03;
--논리적으로 특정 필드를 접근 못하도록 (낮)
ALTER TABLE EMP03 SET UNUSED (DEPTNO);
SELECT * FROM EMP03;
--논리적으로 접근 불가했던 필드를 물리적으로 삭제(새벽)
ALTER TABLE EMP03 DROP UNUSED COLUMNS;

-- 3. 테이블 삭제 (DROP TABLE)
DROP TABLE EMP01;
DROP TABLE DEPT; -- 다른 테이블에서 참조하는 데이터가 있을 경우 바로 DROP 불가

-- 4. 테이블의 모든 행을 제거 (TRUNCATE)
SELECT * FROM EMP03;
TRUNCATE TABLE EMP03;  --EMP03안의 데이터 제거 (취소불가)
SELECT * FROM EMP03;

-- 5. 테이블명 변경(RENAME 원이름 TO 새이름)
SELECT * FROM EMP02;
RENAME EMP02 TO EMP2;
SELECT*FROM EMP2;

-- 6. 데이터 딕셔너리(접근 불가) VS 데이터 딕셔너리 뷰(사용자 접근용)
--종류
-- USER_XXX : 현 계정이 소유하고 있는 객체(테이블, 인덱스, 제약조건, 뷰)
        --EX. USER_TABLES, USER_INDEXES, USER_CONSTRAINTS , USER_VIEWS
--ALL_ XXX : 현 계정이 접근 가능한 객체 (테이블, 인덱스, 제약조건, 뷰)
    --EX. ALL_TABLE, ALL_INDEXES, ALL_CONSTRAINTS, ALL_VIEWS
--DBA_XXX : DBA권한자만 접근가능, DBMS의 모든 객체
    --EX. DBA_TABLES, DBA_INDEXES, DBA_CONSTRAINTS, DBA_VIEWS


SELECT * FROM ALL_TABLES;
SELECT * FROM  ALL_INDEXES; 
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_VIEWS;
SELECT * FROM USER_TABLES; --내 계정이 소유한 테이블 객체 정보 
SELECT * FROM USER_INDEXES; -- 내 계정이 소유한 인덱스 정보 
SELECT * FROM USER_CONSTRAINTS; --내 계정이 소유한 제약조건들
SELECT * FROM USER_VIEWS; --내 계정이 소유한 뷰 정보 
SELECT * FROM DBA_TABLES;
SELECT * FROM DBA_INDEXES; 
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;


--- DCL(사용자계정생성, 사용자권한부여, 권한박탈, 사용자계정삭제)
CREATE USER scott2 IDENTIFIED BY 1234;
-- 권한부여(세션권한, scott.EMP, scott.DEPT 테이블에 대해 모든 권한)
GRANT CREATE SESSION TO scott2;
GRANT ALL ON EMP TO scott2; --EMP테이블에 대한 모든 권한(검색, 추가, 수정, 삭제) 
GRANT ALL ON DEPT TO scott2;
show user;
--권한 박탈(권한박탈할 사용자계정이 접속해제)
REVOKE ALL ON EMP FROM scott2; --scott2의 emp 테이블에 대한 모든 권한 박탈
REVOKE ALL ON DEPT FROM scott2;
show user;
--사용자 계정 삭제(접속 중인 계정 삭제 불가)
DROP USER scott2 CASCADE; 

-- DML(SELECT, INSERT, UPDATE, DELETE)
-- 1. INSERT INTO 테이블병 VALUES(값1, 값2, 값3....);
-- INSERT INTO 테이블명 (필드명1, 필드명2...) VALUES (값1, 값2 , ..)
SELECT * FROM DEPT01;
INSERT INTO DEPT01 VALUES (50,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT01 (DEPTNO,DNAME,LOC) VALUES (60,'IT','SEOUL');
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (70,'OPERATION'); --묵시적으로 LOC에 NULL추가
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES(80, 'HR', NULL); --명시적으로 NULL 추가
INSERT INTO DEPT01 VALUES(90,'SALES',NULL); --명시적으로 NULL추가
--서브쿼리를 이용한 INSERT
INSERT INTO DEPT01 SELECT * FROM DEPT;
--트랜잭션 명령어(DML 명령어만)
COMMIT;

------------------------------
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4),
    ENAME  VARCHAR2(10),
    JOB       VARCHAR2(9),
    SAL       NUMBER(7,2)
    PRIMARY KEY(EMPNO));
SELECT * FROM SAM01;    
INSERT INTO SAM01 VALUES(1000,'APPLE','POLICE',10000);
INSERT INTO SAM01 VALUES(1010,'BANANA','NURSE',15000);
INSERT INTO SAM01 VALUES(1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01 VALUES(1030,'VERY',NULL,25000);
INSERT INTO SAM01 VALUES(1040,'CAT',NULL,2000);
INSERT INTO SAM01 VALUES(7782,'CLARK','MANAGER',2450);
INSERT INTO SAM01 VALUES(7839,'KING','PRESIDENT',5000);
INSERT INTO SAM01 VALUES(7934,'MILLER','CLERK',1300);
SELECT * FROM SAM01;    
UPDATE  SAM01  SET  DEPTNO=10 WHERE EMP;
SELECT * FROM SAM01;    